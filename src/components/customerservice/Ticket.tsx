import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { toast } from "sonner";

export default function Ticket() {
  const queryClient = useQueryClient();
  const [open, setOpen] = useState(false);
  const [formData, setFormData] = useState({
    customer_id: "",
    order_id: "",
    issue_type: "",
    description: "",
    priority: "medium",
  });

  // Fetch non-deleted customers only
  const { data: customers } = useQuery({
    queryKey: ["customers"],
    queryFn: async () => {
      const { data, error } = await supabase
        .from("customers")
        .select("*")
        .is("deleted_at", null)
        .order("customer_name");
      if (error) throw error;
      return data;
    },
  });

  // Fetch sales orders for selected customer
  const { data: orders } = useQuery({
    queryKey: ["sales_orders", formData.customer_id],
    queryFn: async () => {
      if (!formData.customer_id) return [];
      const { data, error } = await supabase
        .from("sales_orders")
        .select("*")
        .eq("customer_id", formData.customer_id)
        .order("order_date", { ascending: false });
      if (error) throw error;
      return data;
    },
    enabled: !!formData.customer_id,
  });

  const createTicketMutation = useMutation({
    mutationFn: async () => {
      // Get customer name
      const customer = customers?.find((c) => c.id === formData.customer_id);
      if (!customer) throw new Error("Customer not found");

      // Create ticket
      const { data: ticket, error: ticketError } = await supabase
        .from("customer_tickets")
        .insert({
          customer_id: formData.customer_id,
          customer_name: customer.customer_name,
          order_id: formData.order_id || null,
          issue_type: formData.issue_type,
          description: formData.description,
          priority: formData.priority,
          contact_info: customer.contact_info,
          ticket_id: "", // Will be auto-generated by trigger
        } as any)
        .select()
        .single();

      if (ticketError) throw ticketError;

      // Create issue
      const { error: issueError } = await supabase
        .from("customer_issues")
        .insert({
          ticket_id: ticket.ticket_id,
          customer_id: formData.customer_id,
          order_id: formData.order_id || null,
          issue_type: formData.issue_type,
          description: formData.description,
          issue_id: "", // Will be auto-generated by trigger
        } as any);

      if (issueError) throw issueError;

      return ticket;
    },
    onSuccess: () => {
      toast.success("Ticket created successfully");
      queryClient.invalidateQueries({ queryKey: ["customer_tickets"] });
      queryClient.invalidateQueries({ queryKey: ["customer_issues"] });
      setFormData({
        customer_id: "",
        order_id: "",
        issue_type: "",
        description: "",
        priority: "medium",
      });
      setOpen(false);
    },
    onError: (error: any) => {
      toast.error(`Failed to create ticket: ${error.message}`);
    },
  });

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>Create Ticket</Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Create New Ticket</DialogTitle>
          <DialogDescription>
            Fill in the details to create a new customer service ticket.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <div className="space-y-2">
            <Label>Customer</Label>
            <Select
              value={formData.customer_id}
              onValueChange={(value) =>
                setFormData({ ...formData, customer_id: value, order_id: "" })
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="Select customer" />
              </SelectTrigger>
              <SelectContent>
                {customers?.map((customer) => (
                  <SelectItem key={customer.id} value={customer.id}>
                    {customer.customer_name} ({customer.customer_id})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label>Order (Optional)</Label>
            <Select
              value={formData.order_id}
              onValueChange={(value) => setFormData({ ...formData, order_id: value })}
              disabled={!formData.customer_id}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select order" />
              </SelectTrigger>
              <SelectContent>
                {orders?.map((order) => (
                  <SelectItem key={order.id} value={order.id}>
                    {order.order_id} - {order.delivery_status}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label>Issue Type</Label>
            <Select
              value={formData.issue_type}
              onValueChange={(value) => setFormData({ ...formData, issue_type: value })}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select issue type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Damaged product">Damaged product</SelectItem>
                <SelectItem value="Wrong item">Wrong item</SelectItem>
                <SelectItem value="Missing item">Missing item</SelectItem>
                <SelectItem value="Late delivery">Late delivery</SelectItem>
                <SelectItem value="Other">Other</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label>Priority</Label>
            <Select
              value={formData.priority}
              onValueChange={(value) => setFormData({ ...formData, priority: value })}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="low">Low</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="high">High</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label>Description</Label>
            <Textarea
              value={formData.description}
              onChange={(e) =>
                setFormData({ ...formData, description: e.target.value })
              }
              placeholder="Describe the issue..."
              rows={4}
            />
          </div>

          <Button
            onClick={() => createTicketMutation.mutate()}
            disabled={
              !formData.customer_id ||
              !formData.issue_type ||
              !formData.description ||
              createTicketMutation.isPending
            }
            className="w-full"
          >
            {createTicketMutation.isPending ? "Creating..." : "Create Ticket"}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
